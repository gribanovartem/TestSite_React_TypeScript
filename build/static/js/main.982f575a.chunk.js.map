{"version":3,"sources":["components/Header.tsx","components/Footer.tsx","components/TodoForm.tsx","components/Preloader.tsx","components/TodoList.tsx","pages/TodoPage.tsx","components/AddForm.tsx","components/Card.tsx","pages/BlogPage.tsx","pages/InfoPage.tsx","pages/MainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","useState","showMenu","setShowMenu","mobileMenu","className","onClick","hideMobileMenu","to","href","data-target","event","preventDefault","mobileMenuHandler","Footer","target","rel","src","alt","width","height","TodoForm","props","title","setTitle","id","type","onChange","value","onKeyPress","key","setTodo","htmlFor","Preloader","TodoList","todoList","onToogle","onRemove","newTodoList","map","todo","titleClass","completed","checked","length","TodoPage","updateTodo","useEffect","fetch","method","headers","then","response","ok","json","console","log","data","localStorage","setItem","JSON","stringify","newTodo","Date","now","prev","body","filter","AddForm","newModalClassName","modal","modalClassName","changeTitle","url","changeUrl","text","changeText","closeModalHandler","e","addNewPost","Card","isImgLoad","changeImgLoad","isImgLoadError","setImgError","post","isLiked","isLikeOn","changeLike","likes","sessionLikes","changeSessionLikes","onLoad","onError","_id","toString","changePostLikes","removeItem","BlogPage","isModal","changeModal","posts","changePosts","newPost","window","location","reload","item","getItem","InfoPage","MainPage","App","component","path","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.982f575a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const Header: React.FC = () => {\r\n   const [showMenu, setShowMenu] = useState(false);\r\n   const mobileMenu = (\r\n      <ul className=\"mobile_nav light-blue darken-3\" onClick={() => hideMobileMenu()}>\r\n         <li>\r\n            <NavLink to=\"/TodoPage\">Список дел</NavLink>\r\n         </li>\r\n         <li>\r\n            <NavLink to=\"/BlogPage\">Блог</NavLink>\r\n         </li>\r\n         <li>\r\n            <NavLink to=\"/InfoPage\">Информация</NavLink>\r\n         </li>\r\n      </ul>\r\n      \r\n   );\r\n   const mobileMenuHandler = (event: React.MouseEvent): void => {\r\n      event.preventDefault();\r\n      setShowMenu(!showMenu);\r\n   };\r\n   const hideMobileMenu = (): void => {\r\n      setShowMenu(false);\r\n   };\r\n   return (\r\n      <div className=\"header \">\r\n         <nav className=\"light-blue darken-3\">\r\n            <div className=\"nav-wrapper\">\r\n               <NavLink to=\"/\" className=\"brand-logo\">\r\n               <span className='logoName'>React</span> <span className='logoFam'>TypeScript</span>\r\n               </NavLink>\r\n               <a\r\n                  href=\"/#\"\r\n                  data-target=\"mobile-demo\"\r\n                  className=\"sidenav-trigger\"\r\n                  onClick={(event) => mobileMenuHandler(event)}\r\n               >\r\n                  <i className=\"material-icons\">menu</i>\r\n               </a>\r\n               <ul className=\"right hide-on-med-and-down\">\r\n                  <li>\r\n                     <NavLink to=\"/TodoPage\">Список дел</NavLink>\r\n                  </li>\r\n                  <li>\r\n                     <NavLink to=\"/BlogPage\">Блог</NavLink>\r\n                  </li>\r\n                  <li>\r\n                     <NavLink to=\"/InfoPage\">Информация</NavLink>\r\n                  </li>\r\n               </ul>\r\n            </div>\r\n            \r\n         </nav>\r\n         {showMenu && mobileMenu}\r\n      </div>\r\n   );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Footer: React.FC = () => {\r\n   return (\r\n      <div className=\"footer light-blue darken-3\">\r\n         <div className=\"footer_author\">\r\n            <i className=\"tiny material-icons\">copyright</i>Artsiom Hrybanau\r\n         </div>\r\n         <div className=\"footer_logo\">\r\n            <span className=\"logoName\">React</span>{\" \"}\r\n            <span className=\"logoFam\">TypeScript</span>\r\n         </div>\r\n         <div className=\"footer_social\">\r\n            <a href=\"https://linkedin.com/in/artsiomhrybanau\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n               <img\r\n                  src=\"../linkedin.png\"\r\n                  alt=\"linkedin\"\r\n                  width=\"25px\"\r\n                  height=\"25px\"\r\n               />\r\n            </a>\r\n            <a href=\"mailto:gribanovartem22@gmail.com\">\r\n               <img src=\"../gmail.png\" alt=\"Почта\" width=\"25px\" height=\"25px\" />\r\n            </a>\r\n            <a href=\"https://github.com/gribanovartem\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n               <img src=\"../github.png\" alt=\"Github\" width=\"25px\" height=\"25px\" />\r\n            </a>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport { ITodoFormProps } from \"../interfaces/interfaces\";\r\n\r\nexport const TodoForm: React.FC<ITodoFormProps> = (props) => {\r\n   const [title, setTitle] = useState<string>(\"\");\r\n   const changeInputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setTitle(event.target.value);\r\n   };\r\n   const enterInputHandler = (event: React.KeyboardEvent) => {\r\n      if (event.key === \"Enter\") {\r\n         props.setTodo(title);\r\n         setTitle(\"\");\r\n      }\r\n   };\r\n   return (\r\n      <div className=\"container\">\r\n         <div className=\"row\">\r\n            <div className=\"input-field col s12\">\r\n               <input\r\n                  id=\"first_name\"\r\n                  type=\"text\"\r\n                  className=\"validate\"\r\n                  onChange={changeInputHandler}\r\n                  value={title}\r\n                  onKeyPress={enterInputHandler}\r\n               />\r\n               <label htmlFor=\"first_name\">Добавить Дело</label>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Preloader: React.FC = () => {\r\n   return (\r\n      // <div className=\"progress\">\r\n      //    <div className=\"indeterminate\"></div>\r\n      // </div>\r\n      <div className=\"preloader-wrapper active\">\r\n         <div className=\"spinner-layer spinner-red-only\">\r\n            <div className=\"circle-clipper left\">\r\n               <div className=\"circle\"></div>\r\n            </div>\r\n            <div className=\"gap-patch\">\r\n               <div className=\"circle\"></div>\r\n            </div>\r\n            <div className=\"circle-clipper right\">\r\n               <div className=\"circle\"></div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n","import React from \"react\";\r\nimport { ITodoListProps } from \"../interfaces/interfaces\";\r\nimport { Preloader } from \"./Preloader\";\r\n\r\nexport const TodoList: React.FC<ITodoListProps> = ({\r\n   todoList,\r\n   onToogle,\r\n   onRemove,\r\n}) => {\r\n   const newTodoList = todoList?todoList.map((todo) => {\r\n      const titleClass = todo.completed ? \"completed\" : \"\";\r\n      return (\r\n         <ul className=\"collection\" key={todo.id}>\r\n            <li className=\"collection-item\">\r\n               <p className=\"checkbox\">\r\n                  <label>\r\n                     <input\r\n                        type=\"checkbox\"\r\n                        checked={todo.completed}\r\n                        onChange={() => onToogle(todo.id)}\r\n                     />\r\n                     <span className={titleClass}>{todo.title}</span>\r\n                  </label>\r\n               </p>\r\n               <p className=\"deleteButton\" onClick={() => onRemove(todo.id)}>\r\n                  Удалить\r\n               </p>\r\n            </li>\r\n         </ul>\r\n      );\r\n   }):null;\r\n\r\n   return <div className=\"container\">{todoList && todoList.length===0 ? <Preloader/> : newTodoList}</div>;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { TodoForm } from \"../components/TodoForm\";\r\nimport { TodoList } from \"../components/TodoList\";\r\nimport { ITodos } from \"../interfaces/interfaces\";\r\n\r\nexport const TodoPage: React.FC = () => {\r\n   const [todoList, updateTodo] = useState<ITodos[]>([]);\r\n   const setTodo = (title: string): void => {\r\n      const newTodo = {\r\n         title: title,\r\n         id: Date.now(),\r\n         completed: false,\r\n      };\r\n      updateTodo((prev) => [newTodo, ...prev]);\r\n      fetch(\r\n         \"https://todoblognodejs.herokuapp.com/todos\",\r\n         // \"http://localhost:8003/todos\",\r\n         {\r\n            method: \"POST\",\r\n            headers: {\r\n               \"Content-Type\": \"application/json;charset=utf-8\",\r\n            },\r\n            body: JSON.stringify(newTodo),\r\n         }\r\n      )\r\n         // .then((response) => {\r\n         //    console.log(response.text());\r\n         // })\r\n         // .then((data) => {\r\n         //    console.log(\"Request succeeded with JSON response\", data);\r\n         // });\r\n   };\r\n   useEffect(() => {\r\n      // const localTodos = JSON.parse(localStorage.getItem('todos') || '[]') as ITodos[]\r\n      // updateTodo(localTodos)\r\n      fetch(\r\n         \"https://todoblognodejs.herokuapp.com/todos\",\r\n         // \"http://localhost:8003/todos\",\r\n         {\r\n            method: \"GET\",\r\n            headers: {\r\n               'Content-Type': 'application/json'\r\n             },\r\n         }\r\n      )\r\n         .then((response) => {\r\n            if (response.ok) {\r\n               return response.json();\r\n            } else {\r\n               console.log(\"error\");\r\n            }\r\n         })\r\n         .then((data) => {\r\n            updateTodo(data);\r\n         });\r\n   }, []);\r\n   useEffect(() => {\r\n      localStorage.setItem(\"todos\", JSON.stringify(todoList));\r\n   }, [todoList]);\r\n   const toogleHandler = (id: number) => {\r\n      updateTodo(\r\n         todoList.map((todo) => {\r\n            if (todo.id === id) {\r\n               todo.completed = !todo.completed;\r\n               fetch(\r\n                  \"https://todoblognodejs.herokuapp.com/todos\",\r\n                  // \"http://localhost:8003/todos\",\r\n                  {\r\n                     method: \"PUT\",\r\n                     headers: {\r\n                        \"Content-Type\": \"application/json;charset=utf-8\",\r\n                     },\r\n                     body: JSON.stringify({id: id, completed: todo.completed}),\r\n                  }\r\n               );\r\n            }\r\n            return todo;\r\n         })\r\n      );\r\n     \r\n      \r\n   };\r\n   const removeHandler = (id: number) => {\r\n      updateTodo((prev) => prev.filter((todo) => todo.id !== id));\r\n      fetch(\r\n         \"https://todoblognodejs.herokuapp.com/todos\",\r\n         // \"http://localhost:8003/todos\",\r\n         {\r\n            method: \"DELETE\",\r\n            headers: {\r\n               \"Content-Type\": \"application/json;charset=utf-8\",\r\n            },\r\n            body: JSON.stringify({id: id}),\r\n         }\r\n      );\r\n   };\r\n   return (\r\n      <>\r\n         <h1>Список дел</h1>\r\n         <TodoForm setTodo={setTodo} />\r\n         <TodoList\r\n            todoList={todoList}\r\n            onToogle={toogleHandler}\r\n            onRemove={removeHandler}\r\n         />\r\n      </>\r\n   );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport const AddForm: React.FC<{\r\n   modal: boolean;\r\n   closeModalHandler: Function;\r\n   addNewPost: Function;\r\n}> = (props) => {\r\n   const modalClassName: string = \"col s3 m4 addForm\";\r\n   const newModalClassName = props.modal\r\n      ? modalClassName + \" modalShow\"\r\n      : modalClassName + \" modalHide\";\r\n\r\n   const [title, changeTitle] = useState<string>(\"\");\r\n   const [url, changeUrl] = useState<string>(\"\");\r\n   const [text, changeText] = useState<string>(\"\");\r\n\r\n   const clearAllInputField = ():void => {\r\n      changeTitle('');\r\n      changeUrl('');\r\n      changeText('');\r\n   }\r\n   \r\n   const changeTitleHandler = (\r\n      e: React.ChangeEvent<HTMLInputElement>\r\n   ): void => {\r\n      changeTitle(e.target.value);\r\n   };\r\n   const changeUrlHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n      changeUrl(e.target.value);\r\n   };\r\n   const changeTextHandler = (\r\n      e: React.ChangeEvent<HTMLTextAreaElement>\r\n   ): void => {\r\n      changeText(e.target.value);\r\n   };\r\n\r\n   return (\r\n      <form className={newModalClassName}>\r\n         <div className=\"close-container\">\r\n            <i\r\n               className=\"material-icons close\"\r\n               onClick={() => props.closeModalHandler()}\r\n            >\r\n               close\r\n            </i>\r\n         </div>\r\n         <div className=\"row\">\r\n            <div className=\"input-field col s12\">\r\n               <input\r\n                  id=\"Title\"\r\n                  value={title}\r\n                  type=\"text\"\r\n                  className=\"validate\"\r\n                  onChange={changeTitleHandler}\r\n               />\r\n               <label htmlFor=\"Title\">Заголовок</label>\r\n            </div>\r\n            <div className=\"input-field col s12\">\r\n               <input\r\n                  id=\"URL\"\r\n                  value={url}\r\n                  type=\"text\"\r\n                  className=\"validate\"\r\n                  onChange={changeUrlHandler}\r\n               />\r\n               <label htmlFor=\"URL\">URL картинки</label>\r\n            </div>\r\n            <div className=\"input-field col s12\">\r\n               <textarea\r\n                  id=\"text\"\r\n                  value={text}\r\n                  className=\"materialize-textarea\"\r\n                  onChange={changeTextHandler}\r\n               ></textarea>\r\n               <label htmlFor=\"text\">Текст статьи</label>\r\n            </div>\r\n         </div>\r\n         <div className=\"modalButtons\">\r\n            <span\r\n               className=\"waves-effect yellow darken-3 btn\"\r\n               onClick={clearAllInputField}\r\n            >\r\n               Очистить\r\n            </span>\r\n            <span\r\n               className=\"waves-effect red lighten-1 btn\"\r\n               onClick={() => props.closeModalHandler()}\r\n            >\r\n               Отмена\r\n            </span>\r\n            <span\r\n               className=\"waves-effect light-blue darken-3 btn\"\r\n               onClick={() => props.addNewPost(title, url, text)}\r\n            >\r\n               Добавить\r\n            </span>\r\n         </div>\r\n      </form>\r\n   );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { IPosts } from \"../interfaces/interfaces\";\r\nimport { Preloader } from \"./Preloader\";\r\n\r\nexport const Card: React.FC<{ post: IPosts, changePostLikes: Function, isLiked: boolean }> = (props) => {\r\n   const [isImgLoad, changeImgLoad] = useState<boolean>(false);\r\n   const [isImgLoadError, setImgError] = useState<boolean>(false);\r\n   const [url, changeUrl] = useState<string>(props.post.url);\r\n   const [isLikeOn, changeLike] = useState<boolean>(props.isLiked);\r\n   const [sessionLikes, changeSessionLikes] = useState<number>(props.post.likes);\r\n   // if(props.isLiked) {\r\n   //    changeLike(true);\r\n   // }\r\n\r\n   const imgLoaded = (): void => {\r\n      changeImgLoad(!isImgLoad);\r\n   };\r\n   const setErrorImg = () => {\r\n      setImgError(true);\r\n      changeUrl('https://dubsism.files.wordpress.com/2017/12/image-not-found.png');\r\n   }\r\n   const changeLikesHandler = () => {\r\n      localStorage.setItem(props.post._id.toString(), 'true')\r\n      changeLike(!isLikeOn);\r\n      if( isLikeOn) {\r\n         changeSessionLikes(sessionLikes-1);\r\n         props.changePostLikes(props.post._id, sessionLikes-1);\r\n         localStorage.removeItem(props.post._id.toString())\r\n      } else {\r\n         changeSessionLikes(sessionLikes+1);\r\n         props.changePostLikes(props.post._id, sessionLikes+1);\r\n      }\r\n   }\r\n   return (\r\n      <>\r\n         <div className={isImgLoad ? \"card\" : \"card display-none\"}>\r\n            <div className=\"card-image\">\r\n               <div className=\"card-wrapper\">\r\n                  <img\r\n                     src={url}\r\n                     alt={props.post.title}\r\n                     onLoad={imgLoaded}\r\n                     onError={setErrorImg}\r\n                  />\r\n               </div>\r\n               <span className=\"card-title\">{props.post.title}</span>\r\n            </div>\r\n            <div className=\"card-content\">\r\n               <p>{props.post.text}</p>\r\n               <div className=\"likeIcon\">\r\n                  <i className=\"material-icons\" onClick={changeLikesHandler}>{isLikeOn ? 'favorite' : 'favorite_border'}</i>\r\n                  <i className=\"likeCount\">{sessionLikes}</i>\r\n               </div>\r\n            </div>\r\n         </div>\r\n         <div className={isImgLoad || isImgLoadError ?  \"preloader display-none\" : \"preloader\"}>\r\n            <Preloader />\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n","import React, { useState, MouseEvent, useEffect } from \"react\";\r\nimport { AddForm } from \"../components/AddForm\";\r\nimport { Card } from \"../components/Card\";\r\nimport { IPosts } from \"../interfaces/interfaces\";\r\nexport const BlogPage: React.FC = () => {\r\n   const [isModal, changeModal] = useState<boolean>(false);\r\n   const [posts, changePosts] = useState<Array<IPosts>>([]);\r\n   \r\n\r\n   const changePostLikes = (id: string, likes: number):void => {\r\n      fetch(\r\n         // \"https://todoblognodejs.herokuapp.com/posts\",\r\n         \"http://localhost:8003/posts\",\r\n         {\r\n            method: \"PUT\",\r\n            headers: {\r\n               \"Content-Type\": \"application/json;charset=utf-8\",\r\n            },\r\n            body: JSON.stringify({id: id, likes: likes}),\r\n         }\r\n      ).then((response) => {\r\n         console.log(response.text());\r\n      });\r\n   }\r\n\r\n   const changeModalHandler = (e: React.MouseEvent<HTMLSpanElement>): void => {\r\n      changeModal(!isModal);\r\n   };\r\n   const closeModalHandler = (e: React.MouseEvent<HTMLSpanElement>): void => {\r\n      if (isModal) {\r\n         changeModal(false);\r\n      }\r\n   };\r\n   const addNewPost = (title: string, url: string, text: string): void => {\r\n      const newPost = {\r\n         title,\r\n         url,\r\n         text,\r\n         likes: 0\r\n      }\r\n      fetch(\r\n         \"https://todoblognodejs.herokuapp.com/posts\",\r\n         // \"http://localhost:8003/posts\",\r\n         {\r\n            method: \"POST\",\r\n            headers: {\r\n               \"Content-Type\": \"application/json;charset=utf-8\",\r\n            },\r\n            body: JSON.stringify(newPost),\r\n         }\r\n      ).then((response) => {\r\n         console.log(response.text());\r\n      });\r\n\r\n      changeModal(false);\r\n      window.location.reload();\r\n   };\r\n\r\n   useEffect(() => {\r\n      fetch(\r\n         \"https://todoblognodejs.herokuapp.com/posts\",\r\n         // \"http://localhost:8003/posts\",\r\n         {\r\n            method: \"GET\",\r\n            // mode: 'no-cors',\r\n            headers: {\r\n               \"Content-Type\": \"application/json;charset=utf-8\",\r\n            },\r\n         }\r\n      )\r\n         .then((response) => {\r\n            if (response.ok) {\r\n               return response.json();\r\n            } else {\r\n               console.log(\"error\");\r\n            }\r\n         })\r\n         .then((data) => {\r\n            changePosts(data);\r\n         });\r\n   }, []);\r\n\r\n   return (\r\n      <div className=\"row\">\r\n         <AddForm\r\n            modal={isModal}\r\n            closeModalHandler={closeModalHandler}\r\n            addNewPost={addNewPost}\r\n         />\r\n         <div\r\n            className={isModal ? \"darkBackground active\" : \"darkBackground\"}\r\n            onClick={closeModalHandler}\r\n         />\r\n         <div className=\"col s3 m4\">\r\n            <span\r\n               className=\"btn-floating btn-large waves-effect waves-light light-blue darken-3\"\r\n               onClick={changeModalHandler}\r\n            >\r\n               <i className=\"material-icons addButton\">add</i>\r\n            </span>\r\n            {posts.map((item) => {\r\n               return <Card post={item} key={item._id} isLiked={localStorage.getItem(item._id.toString())?true:false} changePostLikes={changePostLikes}/>;\r\n            })}\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n","import React from \"react\";\r\nexport const InfoPage: React.FC = () => {\r\n   return (\r\n      <>\r\n         <ul className=\"infoList\">Этот сайт разработан на следующем стеке технологий:\r\n            <li className=\"infoList_item\">React</li>\r\n            <li className=\"infoList_item\">TypeScript</li>\r\n            <li className=\"infoList_item\">NodeJS</li>\r\n            <li className=\"infoList_item\">Express</li>\r\n            <li className=\"infoList_item\">MongoDB</li>\r\n         </ul>\r\n      </>\r\n   );\r\n};\r\n","import React from 'react';\r\nexport const MainPage: React.FC = () => {\r\n    return (\r\n        <h2>Добро пожаловать на мой сайт Бро</h2>\r\n    )\r\n}","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Header } from \"./components/Header\";\nimport { Footer } from \"./components/Footer\";\nimport { TodoPage } from \"./pages/TodoPage\";\nimport { BlogPage } from \"./pages/BlogPage\";\nimport { InfoPage } from \"./pages/InfoPage\";\nimport { MainPage } from \"./pages/MainPage\";\n\nconst App: React.FC = () => {\n   return (\n      <BrowserRouter>\n         <div className=\"App\">\n            <div className=\"content\">\n               <Header />\n               <Switch>\n                  <Route component={MainPage} path=\"/\" exact />\n                  <Route component={TodoPage} path=\"/TodoPage\" exact />\n                  <Route component={BlogPage} path=\"/BlogPage\" exact />\n                  <Route component={InfoPage} path=\"/InfoPage\" exact />\n               </Switch>\n            </div>\n            <Footer />\n         </div>\n      </BrowserRouter>\n   );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}